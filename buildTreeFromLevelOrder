#include <iostream>
#include <queue>
using namespace std;

class Node{
    public:
        int data;
        Node* left;
        Node* right;
    
    Node(int d){
        this->data=d;
        this->left=NULL;
        this->right=NULL;
    }
};

void buildTreeFromLevelOrder(Node* &root){
    queue <Node*> q;
    cout<<"enter the node "<<endl;
    int data;
    cin>>data;
    root=new Node(data);
    q.push(root);
    
    
    while(!q.empty()){
        Node* temp=q.front();
        q.pop();
        
        cout<<"enter the left node for "<<temp->data;
        int leftnode;
        cin>>leftnode;
        if(leftnode!=-1){
            temp->left=new Node(leftnode);
            q.push(temp->left);
        }
        
        cout<<"enter the right node for "<<temp->data;
        int rightnode;
        cin>>rightnode;
        if(rightnode!=-1){
            temp->right=new Node(rightnode);
            q.push(temp->right);
        }
    }
}

void levelOrderTraversal(Node* root){
    queue<Node*> q;
    q.push(root);
    q.push(NULL);
    
    while(!q.empty()){
        Node* temp=q.front();
        // cout<<temp->data;
        q.pop();
        
        if(temp==NULL){
            cout<<endl;
            if(!q.empty()){
                q.push(NULL);
            }
        }
        else{
            cout<<temp->data<<" ";
            if(temp->left){
                q.push(temp->left);
            }
            if(temp->right){
                q.push(temp->right);
            }
        }
        
    }   
    
}

int main(){
    Node* root=NULL;
    // root=BuildTree(root);
    // inorder(root);
    buildTreeFromLevelOrder(root);
    levelOrderTraversal(root);
}
