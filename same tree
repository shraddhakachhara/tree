/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    // void height(TreeNode* p, TreeNode* q,bool &isSame){
    //     if(root==NULL){
    //         return 0;
    //     }
    //     int left_p=height(p->left);
    //     int right_p=height(p->right);

    //     int left_q=height(q->left);
    //     int right_q=height(q->right);

    //     if(left_p==left_q && right_p==right_q){
    //         if()
    //     }

    // }
    bool isSameTree(TreeNode* p, TreeNode* q) {
        // if(p==NULL && q==NULL){
        //     return true;
        // }
        // if(p==NULL || q==NULL){
        //     return false;
        // }

        // queue <TreeNode*> qp;
        // queue <TreeNode*> qq;
        // qp.push(p);
        // qq.push(q);
        // // int count
        // while(!qp.empty() && !qq.empty()){
        //     TreeNode* tempp=qp.front();
        //     qp.pop();
        //     TreeNode* tempq=qq.front();
        //     qq.pop();
        //     if(tempp->val!=tempq->val){
        //         return false;
        //     }
        //     if(tempp->val==tempq->val){
        //         if((tempq->left && !tempp->left) || (tempq->right && !tempp->right) ||(!tempq->left && tempp->left) || (!tempq->right && tempp->right)){
        //             return false;
        //         }
        //         if(tempp->left && tempq->left){
        //             qp.push(tempp->left);
        //             qq.push(tempq->left);
        //         }
        //         if(tempp->right && tempq->right){
        //             qp.push(tempp->right);
        //             qq.push(tempq->right);
        //         }
                
        //         // if(q->right){
        //         //     qq.push(q->right);
        //         // }
        //     }
        // }
        // return true;
        if(p==NULL && q==NULL){
            return true;
        }
        bool left1;
        bool right1;
        if(p!=NULL && q!=NULL && p->val==q->val){
            left1=isSameTree(p->left,q->left);
            right1=isSameTree(p->right,q->right);
        }
        if(left1==right1 && left1==true){
            return true;
        }
        // else{
            return false;
        // }
        // isSameTree(p->left,q->left);
        // isSameTree(p->right,q->right);
    }
};
